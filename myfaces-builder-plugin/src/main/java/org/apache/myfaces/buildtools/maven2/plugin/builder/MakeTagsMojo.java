/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.myfaces.buildtools.maven2.plugin.builder;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.logging.Logger;

import org.apache.maven.archetype.exception.ArchetypeGenerationFailure;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.apache.myfaces.buildtools.maven2.plugin.builder.model.ComponentMeta;
import org.apache.myfaces.buildtools.maven2.plugin.builder.model.Model;
import org.apache.myfaces.buildtools.maven2.plugin.builder.utils.BuildException;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.context.Context;
import org.codehaus.plexus.util.IOUtil;
import org.codehaus.plexus.velocity.VelocityComponent;

/**
 * Maven goal to generate java source code for Component tag classes.
 * 
 * @version $Id$
 * @requiresDependencyResolution compile
 * @goal make-tags
 * @phase generate-sources
 */
public class MakeTagsMojo extends AbstractMojo
{
    final Logger log = Logger.getLogger(MakeTagsMojo.class.getName());

    /**
     * Injected Maven project.
     * 
     * @parameter expression="${project}"
     * @readonly
     */
    private MavenProject project;

    /**
     * @parameter expression="${project.build.directory}"
     * @readonly
     */
    private File buildDirectory;

    /**
     * Injected name of file generated by earlier run of BuildMetaDataMojo goal.
     * 
     * @parameter
     */
    private String metadataFile = "classes/META-INF/myfaces-metadata.xml";

    /**
     * @parameter expression="src/main/java-templates"
     * @required
     */
    private File templateSourceDirectory;

    /**
     * @parameter expression="${project.build.directory}/maven-faces-plugin/main/java"
     * @required
     */
    private File generatedSourceDirectory;

    /**
     * @parameter
     * @required
     */
    private String packageContains;

    /**
     * @parameter
     * @required
     */
    private String typePrefix;

    /**
     * @parameter
     */
    private boolean force;

    /**
     * @parameter
     */
    private boolean suppressListenerMethods;

    /**
     * @parameter
     */
    private String jsfVersion;
    
    /**
     * @component
     */
    private VelocityComponent velocity;    

    /**
     * Execute the Mojo.
     */
    public void execute() throws MojoExecutionException
    {
        // This command makes Maven compile the generated source:
        // getProject().addCompileSourceRoot( absoluteGeneratedPath.getPath() );
        try
        {
            Model model = IOUtils.loadModel(new File(buildDirectory,
                    metadataFile));
            new Flattener(model).flatten();
            generateComponents(model);
        }
        catch (IOException e)
        {
            throw new MojoExecutionException("Error generating components", e);
        }
        catch (BuildException e)
        {
            throw new MojoExecutionException("Error generating components", e);
        }
    }

    /**
     * Generates parsed components.
     */
    private void generateComponents(Model model) throws IOException,
            MojoExecutionException
    {
        System.out.println("Velocity:"+velocity.toString());
        for (Iterator it = model.getComponents().iterator(); it.hasNext();){
            ComponentMeta component = (ComponentMeta) it.next();
            _generateComponent(component);
        }
        //throw new MojoExecutionException("stopping..");
    }

    /**
     * Generates a parsed component.
     * 
     * @param component
     *            the parsed component metadata
     */
    private void _generateComponent(ComponentMeta component)
            throws MojoExecutionException
    {
        Context context = new VelocityContext();
        context.put("component",component);
        
        Writer writer = null;

        try
        {
            //writer = new OutputStreamWriter( new FileOutputStream( outFile ), encoding );

            //velocity.getEngine().mergeTemplate( templateFileName, encoding, context, writer );

            writer.flush();
        }
        catch ( Exception e )
        {
            throw new Exception(
                "Error merging velocity templates: " + e.getMessage(),
                e
            );
        }
        finally
        {
            IOUtil.close( writer );
            writer = null;
        }

    }

    private boolean _is12()
    {
        return "1.2".equals(jsfVersion) || "12".equals(jsfVersion);
    }

}
