<?xml version="1.0" encoding="UTF-8"?>
      
        <!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation Maven//EN" "http://maven.apache.org/dtd/maven-xdoc.dtd">
      
    <document>
    <body>
        <!-- Description -->
        <section name="Description">
            
            <p>
                This component replicates the 'Value Change Listener' functionality on the client side. It can be used
                when the user would like a change in the value of one control to trigger off changes in the states of 
                other controls. One or more Javascript Listeners can be nested within the source control (a control 
                belonging to the 'javax.faces.Input' family). When the value of the source control is modified, the 
                listeners are triggered and the states of the target controls modified.
            </p>
        </section>
        <!-- screen shot -->
        <section name="Screen Shot">
            
            <p>Not Available</p> <!-- replace with either a figure or Not Available -->
            <!--
            <figure src="jscookmenu.png" alt="jscookmenu"/>
            -->
        </section>
        <!-- API -->
        <section name="API">
            
            <table>
                <tr>
                    <td colspan="1" rowspan="1">component-family</td>
                    <td colspan="1" rowspan="1">javax.faces.Output</td>
                </tr>
                <tr>
                    <td colspan="1" rowspan="1">renderer-type</td>
                    <td colspan="1" rowspan="1">org.apache.myfaces.JsValueChangeListener</td>
                </tr>
                <tr>
                    <td colspan="1" rowspan="1">component-class</td>
                    <td colspan="1" rowspan="1">org.apache.myfaces.custom.jslistener.JsValueChangeListener</td>
                </tr>
                <tr>
                    <td colspan="1" rowspan="1">renderer-class</td>
                    <td colspan="1" rowspan="1">org.apache.myfaces.JsValueChangeListener</td>
                </tr>
                <tr>
                    <td colspan="1" rowspan="1">tag-class</td>
                    <td colspan="1" rowspan="1">org.apache.myfaces.custom.jslistener.JsValueChangeListenerTag</td>
                </tr>
            </table>
        </section>
        <!-- Usage -->
        <section name="Usage">
            
            <source xml:space="preserve">
                &lt;t:jsValueChangeListener for="id"
                            property="property"
                            expressionValue="{true|false}" 
                            bodyTagEvent="eventName" /&gt;
            </source>
        </section>
        <!-- Syntax -->
        <section name="Syntax">
            
            <blockquote><h3>&lt;t:jsValueChangeListener&gt;</h3>
                <code>for - the id of the target control</code><br/>
                <code>expressionValue - the javascript expression to evaluate. The keyword '$srcElem' resolves to 
                    the source control and the keyword '$destElem' resolves to the target control </code><br/>
                <code>property(optional) - The result of the evaluated expression is assigned to the specified property 
                    of the target control</code><br/>
                <code>bodyEventTag(optional) - Events are triggered by the 'onchange' event of the source control. Here, 
                    an additional event can be specified (onload?)</code><br/>
            </blockquote>
        </section>

        <!-- Examples -->
        <section name="Examples">
            
            <p>
               Some examples will throw more light on the usage of this component.
            </p>
        
            <p>
            <strong>Example 1</strong><br/>
                Suppose we have two text fields on a page. We would like to keep the value of the second text field 
                in sync with the value of the first. This can be accomplised with the following code:
            </p>
            <source xml:space="preserve">
                &lt;h:inputText id="text1"&gt;
                    &lt;t:jsValueChangeListener for="text2" property="value" 
                                                expressionValue="$srcElem.value" /&gt;
                &lt;/h:inputText&gt;
                &lt;h:inputText id="text2"/&gt;
            </source>
            <p> 
                When the value of text1 changes, the 'onchange' event is triggered. The javascript expression specified by 
                'expressionValue' is evaluated, and the result is assigned to the specified property (in this case, 'value') 
                of the target control.
            </p>

            <p>
            <strong>Example 2</strong><br/>
                Sometimes, the evalution of the javascript expression itself causes the desired side-effect. In this case, 
                it is not necessary to specify the 'property' attribute for the target control. In this example, we have 
                a combo-box, and we want the selection of a specific value in the combo-box to cause a text box to be hidden.
            </p>
            <source xml:space="preserve">
       &lt;h:selectOneMenu id="selone_menu_colors" value="red" styleClass="selectOneMenu"&gt;
           &lt;f:selectItems value="#{carconf.colors}" /&gt;
           &lt;t:jsValueChangeListener for="selone_menu_subcolors" 
             expressionValue="($srcElem.options[$srcElem.selectedIndex].value=='black')?
             $destElem.style.display='inline':$destElem.style.display='none';"/&gt;
       &lt;/h:selectOneMenu&gt;
       &lt;h:inputText id="selone_menu_subcolors"/&gt;
            </source>
            <p> 
                The evaluation of the expression causes the text box to be hidden when the appropriate value is selected.
            </p>
        
       </section>

        <!-- Instructions -->
        <section name="Instructions">
            
            <p>
                see examples/jslistener.jsp for an example!
            </p>
        </section>
    </body>
    

</document>